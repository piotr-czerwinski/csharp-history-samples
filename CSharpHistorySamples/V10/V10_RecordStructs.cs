using System.Text;
using System.Text.Json.Serialization;

namespace CSharpHistorySamples;

internal static partial class V10
{
    internal static void RecordStructs()
    {
        WriteFirstLineInSample("Record structs");

        var recordStruct1 = new RecordStruct(1, 2);
        var recordStruct2 = new RecordStruct(1, 2);
        var recordStruct3 = new RecordStruct(); // parameterless constructor autogenerated by the compiler

        recordStruct3.X = 2; // positional properties CAN be mutated for record structs!
        recordStruct3.Deconstruct(out int x, out int y); // method generated by the compiler

        WriteLine($"Are equal 1 and 2: {recordStruct1.Equals(recordStruct2)}");
        WriteLine($"Hash codes; record 1: {recordStruct1.GetHashCode()} record 2: {recordStruct2.GetHashCode()}");
        
        WriteLine($"Nondestructive mutation:");
        // new object can be created as a copy with optionally updated props
        var updatedRecord = recordStruct1 with
        {
            X = 1
        };

        WriteLine($"Are equal base and updated: {recordStruct1.Equals(updatedRecord)}");
        WriteLine($"Hash codes; original: {recordStruct1.GetHashCode()} updated: {updatedRecord.GetHashCode()}");
        WriteLine($"Auto generated formatted ToString: {updatedRecord}");

        var recordWithParameterlessConstructor = new RecordWithParameterlessConstructor()
        {
            X = 1,
            Y = 2,
        };

        WriteLine($"Auto generated formatted ToString with custom PrintMembers : {recordWithParameterlessConstructor}");

        //recordWithParameterlessConstructor.X = 2; // non-positional properties cannot be mutated for record structs

        var readonlyRecordStruct = new ReadonlyRecordStruct(1, 2);
        // readonlyRecordStruct.X = 2; // for readonly record struct, props are init only
    }


    // structs cannot be abstract and cannot be derived from other structs.
    internal record struct RecordStruct(
        [property: JsonPropertyName("DimX")] int X, // attributes can be defined for autogenerated properties
        [property: JsonPropertyName("DimY")] int Y)
    {

        // for record struct Copy constructor is not called on nondestructive mutation
        private RecordStruct(RecordStruct other)
            : this(other.X, other.Y)
        {
            WriteLine("Copy constructor called");
        }

        // CS8859 Members named 'Clone' are disallowed in records - they are autogenerated by the compiler
        //protected RecordStruct Clone() { }
    }

    internal readonly record struct ReadonlyRecordStruct(int X, int Y);

    internal record RecordWithParameterlessConstructor()
    {
        internal int X
        {
            get; init;
        }
        internal int Y
        {
            get; init;
        }

        // auto generated method PrintMembers (used in ToString) can be implemented manually
        protected virtual bool PrintMembers(StringBuilder stringBuilder)
        {
            stringBuilder.Append($"DimX = {X}, DimY = {Y}, ");
            return true;
        }
    }
}
